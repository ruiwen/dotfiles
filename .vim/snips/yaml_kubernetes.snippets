snippet deployment "Kubernetes Deployment" b
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name:  ${1:name}
  labels:
    ${2:labelkey}: ${3:labelvalue}
spec:
  replicas: ${4:1}
  template:
    metadata:
      labels:
        $2: $3
      ${4:annotations:
        ${5:annotationkey}: ${6:annotationvalue}
       }
    spec:
      containers:
      - name: $1
        image: ${7:image}
        imagePullPolicy: ${8:Always}
        env:
        - name: ${9:ENVNAME}
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      # - name: NAME
      #    valueFrom:
      #      configMapKeyRef:
      #        name: configmap.name
      #        key: configmap.key
        ports:
        - containerPort: ${10:port}
          name: ${11:portname}
          protocol: ${12:TCP}
        volumeMounts:
        - name: $13
          mountPath: ${15:/pod/path/data}
        - name: $13
          mountPath: /some/config/dir
      volumes:
          - name: ${13:storagename}
            hostPath:
              path: ${14:/host/path}
          - emptyDir:
              medium: ""
          - name: some-configmap
            configMap:
              name: some-configmap
	      items:
	      - key: onekey
	        path: filetomapto  # This ends up at /some/config/dir/filetomapto
      ${16:nodeSelector:
        nodetype: k8compute
       }
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxUnavailable: 30%
      maxSurge: 50%
  minReadySeconds: 30
  revisionHistoryLimit: 5
endsnippet

snippet "env s" "Kubernetes Envvvar from Secret"
- name: ${1:ENVNAME}
  valueFrom:
    secretKeyRef:
      name: ${2:secretname}
      key: ${3:secretkey}
endsnippet

snippet service "Kubernetes Service" b
kind: Service
apiVersion: v1
metadata:
  name: ${1:name}
spec:
  type: ${7:NodePort}
  selector:
     ${2:deploymentlabelkey}: ${3:deploymentlabelvalue}
  ports:
  - protocol: ${4:TCP}
    port: ${5:outwardportnum}
    targetPort: ${6:podportnum}
    nodePort: ${8:nodeportnum}
endsnippet

snippet daemonset "Kubernetes Daemonset" b
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name:  ${1:name}
  labels:
    ${2:labelkey}: ${3:labelvalue}
spec:
  template:
    metadata:
      labels:
        $2: $3
      ${4:annotations:
        ${5:annotationkey}: ${6:annotationvalue}
        }
    spec:
      containers:
      - name: $1
        image: ${7:image}
        imagePullPolicy: ${8:Always}
        env:
        - name: ${9:ENVNAME}
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      # - name: NAME
      #    valueFrom:
      #      configMapKeyRef:
      #        name: configmap.name
      #        key: configmap.key
        ports:
        - containerPort: ${10:port}
          name: ${11:portname}
          protocol: ${12:TCP}
        volumeMounts:
        - name: $13
          mountPath: ${15:/pod/path/data}
      volumes:
          - name: ${13:storagename}
            hostPath:
              path: ${14:/host/path}
          - emptyDir:
              medium: ""
      ${16:nodeSelector:
        nodetype: k8compute
      }
endsnippet

snippet ingress "Kubernetes Ingress" b
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ${1:name}
  annotations:
    ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: ${2:hostname.com}
    http:
      paths:
      - path: /foo
        backend:
          serviceName: ${3:servicename.svc.cluster.local}
          servicePort: ${4:portnum}
      - path: /bar
        backend:
          serviceName: s2
          servicePort: 80
endsnippet

snippet namespace "Kubernetes Namespace"
apiVersion: v1
kind: Namespace
metadata:
  name: ${1:namespace}
endsnippet

snippet serviceaccount "Kubernetes ServiceAccount"
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${1:serviceaccount}
endsnippet

snippet clusterrole "Kubernetes ClusterRole"
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ${1:name}
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  - pods/proxy
  verbs: ["get", "list", "watch"] # "create", "update", "patch", "delete"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
endsnippet

snippet clusterrolebinding "Kubernetes ClusterRoleBinding"
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ${1:name}
subjects:
- kind: User
  name: system:serviceaccount:${2:namespace}:$1
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: $1
  apiGroup: rbac.authorization.k8s.io
endsnippet

snippet endpoint "Kubernetes Endpoints"
apiVersion: v1
kind: Endpoints
metadata:
  name: ${1:name}
  labels:
    ${2:label}: ${3:value}
subsets:
- addresses:
  - ip: ${4:podip}
    nodeName: ${5:nodename}
  ports:
  - name: ${6:portname}
    port: ${7:portnumber}
    protocol: ${8:TCP}
endsnippet

snippet secret "Kubernetes Secret"
apiVersion: v1
kind: Secret
metadata:
  name: ${1:name}
type: Opaque
data:
  ${2:filename}: ${3:contents}
endsnippet

snippet networkpolicy "Kubernetes NetworkPolicy"
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ${1:name}
spec:
  podSelector:
    matchLabels:
      ${2:label}: ${3:value}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: ${4:172.17.0.0/16}
        except:
        - ${5:172.17.1.0/24}
    - namespaceSelector:
        matchLabels:
          ${6:label}: ${7:value}
    - podSelector:
        matchLabels:
          ${8:label}: ${9:value}
    ports:
    - protocol: TCP
      port: ${10:1234}
  egress:
  - to:
    - ipBlock:
        cidr: ${11:10.0.0.0/24}
    ports:
    - protocol: TCP
      port: ${12:1234}
endsnippet


snippet persistentvolume "Kubernetes PersistentVolume"
apiVersion: v1
kind: PersistentVolume
metadata:
  name: ${1:name}
spec:
  capacity:
    storage: ${2:10}GiB
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: ${3:local-etcd}
  local:
    path: ${4:/mnt/storage/path/to/mountpoint}
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - ${5:nodename}
endsnippet


snippet persistentvolumeclaim "Kubernetes PersistentVolumeClaim"
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: ${1:name}
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: ${2:10}Gi
  storageClassName: ${3:manual}
  ${4:selector:
    matchLabels:
      release: "stable"
    matchExpressions:
      - {key: environment, operator: In, values: [dev]}}
endsnippet


snippet storageclass "Kubernetes StorageClass"
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: ${1:local-storage}
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: ${2:Retain}
endsnippet

snippet job "Kubernetes Job"
apiVersion: batch/v1
kind: Job
metadata:
  name: ${1:name}
spec:
  template:
    spec:
      containers:
      - name: $1
        image: ${2:image/image}
        command: [${3:"parts", "of", "the", "command"}]
      restartPolicy: ${4:Never|OnFailure}
  backoffLimit: ${5:4}
endsnippet

snippet statefulset "Kubernetes StatefulSet"
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${1:name}
  labels:
    ${2:label}: ${3:value}
spec:
  replicas: ${4:3}
  selector:
    matchLabels:
      $2: $3
  serviceName: $1
  template:
    metadata:
      labels:
        $2: $3
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: ${5:name}
        image: ${6:image}
	imagePullPolicy: IfNotPresent
        ports:
        - containerPort: ${7:port}
          name: ${8:portname}
          protocol: ${9:TCP}
        volumeMounts:
        - name: ${10:name}
          mountPath: ${11:/path/inside/pod}
  volumeClaimTemplates:
  - metadata:
      name: $10
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "${12:storage-class-name}"
      resources:
        requests:
          storage: ${13:5}Gi
endsnippet

snippet configmap "Kubernetes ConfigMap"
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${1:name}
data:
  ${2:key}: |
    ${3:value}
endsnippet
